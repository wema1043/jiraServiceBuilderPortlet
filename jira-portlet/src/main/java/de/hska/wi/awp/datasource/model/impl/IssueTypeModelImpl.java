package de.hska.wi.awp.datasource.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import de.hska.wi.awp.datasource.model.IssueType;
import de.hska.wi.awp.datasource.model.IssueTypeModel;
import de.hska.wi.awp.datasource.model.IssueTypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IssueType service. Represents a row in the &quot;jira_IssueType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.hska.wi.awp.datasource.model.IssueTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IssueTypeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see IssueTypeImpl
 * @see de.hska.wi.awp.datasource.model.IssueType
 * @see de.hska.wi.awp.datasource.model.IssueTypeModel
 * @generated
 */
@JSON(strict = true)
public class IssueTypeModelImpl extends BaseModelImpl<IssueType>
    implements IssueTypeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a issue type model instance should use the {@link de.hska.wi.awp.datasource.model.IssueType} interface instead.
     */
    public static final String TABLE_NAME = "jira_IssueType";
    public static final Object[][] TABLE_COLUMNS = {
            { "issueId", Types.VARCHAR },
            { "issueName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table jira_IssueType (issueId VARCHAR(75) not null primary key,issueName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table jira_IssueType";
    public static final String ORDER_BY_JPQL = " ORDER BY issueType.issueId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY jira_IssueType.issueId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.hska.wi.awp.datasource.model.IssueType"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.hska.wi.awp.datasource.model.IssueType"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.hska.wi.awp.datasource.model.IssueType"));
    private static ClassLoader _classLoader = IssueType.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            IssueType.class
        };
    private String _issueId;
    private String _issueName;
    private IssueType _escapedModel;

    public IssueTypeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static IssueType toModel(IssueTypeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        IssueType model = new IssueTypeImpl();

        model.setIssueId(soapModel.getIssueId());
        model.setIssueName(soapModel.getIssueName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<IssueType> toModels(IssueTypeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<IssueType> models = new ArrayList<IssueType>(soapModels.length);

        for (IssueTypeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _issueId;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setIssueId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _issueId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return IssueType.class;
    }

    @Override
    public String getModelClassName() {
        return IssueType.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("issueId", getIssueId());
        attributes.put("issueName", getIssueName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String issueId = (String) attributes.get("issueId");

        if (issueId != null) {
            setIssueId(issueId);
        }

        String issueName = (String) attributes.get("issueName");

        if (issueName != null) {
            setIssueName(issueName);
        }
    }

    @JSON
    @Override
    public String getIssueId() {
        if (_issueId == null) {
            return StringPool.BLANK;
        } else {
            return _issueId;
        }
    }

    @Override
    public void setIssueId(String issueId) {
        _issueId = issueId;
    }

    @JSON
    @Override
    public String getIssueName() {
        if (_issueName == null) {
            return StringPool.BLANK;
        } else {
            return _issueName;
        }
    }

    @Override
    public void setIssueName(String issueName) {
        _issueName = issueName;
    }

    @Override
    public IssueType toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (IssueType) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IssueTypeImpl issueTypeImpl = new IssueTypeImpl();

        issueTypeImpl.setIssueId(getIssueId());
        issueTypeImpl.setIssueName(getIssueName());

        issueTypeImpl.resetOriginalValues();

        return issueTypeImpl;
    }

    @Override
    public int compareTo(IssueType issueType) {
        String primaryKey = issueType.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof IssueType)) {
            return false;
        }

        IssueType issueType = (IssueType) obj;

        String primaryKey = issueType.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<IssueType> toCacheModel() {
        IssueTypeCacheModel issueTypeCacheModel = new IssueTypeCacheModel();

        issueTypeCacheModel.issueId = getIssueId();

        String issueId = issueTypeCacheModel.issueId;

        if ((issueId != null) && (issueId.length() == 0)) {
            issueTypeCacheModel.issueId = null;
        }

        issueTypeCacheModel.issueName = getIssueName();

        String issueName = issueTypeCacheModel.issueName;

        if ((issueName != null) && (issueName.length() == 0)) {
            issueTypeCacheModel.issueName = null;
        }

        return issueTypeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{issueId=");
        sb.append(getIssueId());
        sb.append(", issueName=");
        sb.append(getIssueName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("de.hska.wi.awp.datasource.model.IssueType");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>issueId</column-name><column-value><![CDATA[");
        sb.append(getIssueId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>issueName</column-name><column-value><![CDATA[");
        sb.append(getIssueName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
