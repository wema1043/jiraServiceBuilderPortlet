package de.hska.wi.awp.datasource.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import de.hska.wi.awp.datasource.model.Status;
import de.hska.wi.awp.datasource.model.StatusModel;
import de.hska.wi.awp.datasource.model.StatusSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Status service. Represents a row in the &quot;jira_Status&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.hska.wi.awp.datasource.model.StatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StatusImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StatusImpl
 * @see de.hska.wi.awp.datasource.model.Status
 * @see de.hska.wi.awp.datasource.model.StatusModel
 * @generated
 */
@JSON(strict = true)
public class StatusModelImpl extends BaseModelImpl<Status>
    implements StatusModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a status model instance should use the {@link de.hska.wi.awp.datasource.model.Status} interface instead.
     */
    public static final String TABLE_NAME = "jira_Status";
    public static final Object[][] TABLE_COLUMNS = {
            { "statusId", Types.VARCHAR },
            { "name", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table jira_Status (statusId VARCHAR(75) not null primary key,name VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table jira_Status";
    public static final String ORDER_BY_JPQL = " ORDER BY status.statusId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY jira_Status.statusId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.hska.wi.awp.datasource.model.Status"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.hska.wi.awp.datasource.model.Status"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.hska.wi.awp.datasource.model.Status"),
            true);
    public static long NAME_COLUMN_BITMASK = 1L;
    public static long STATUSID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.hska.wi.awp.datasource.model.Status"));
    private static ClassLoader _classLoader = Status.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Status.class };
    private String _statusId;
    private String _name;
    private String _originalName;
    private long _columnBitmask;
    private Status _escapedModel;

    public StatusModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Status toModel(StatusSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Status model = new StatusImpl();

        model.setStatusId(soapModel.getStatusId());
        model.setName(soapModel.getName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Status> toModels(StatusSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Status> models = new ArrayList<Status>(soapModels.length);

        for (StatusSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _statusId;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setStatusId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _statusId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return Status.class;
    }

    @Override
    public String getModelClassName() {
        return Status.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("statusId", getStatusId());
        attributes.put("name", getName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String statusId = (String) attributes.get("statusId");

        if (statusId != null) {
            setStatusId(statusId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }
    }

    @JSON
    @Override
    public String getStatusId() {
        if (_statusId == null) {
            return StringPool.BLANK;
        } else {
            return _statusId;
        }
    }

    @Override
    public void setStatusId(String statusId) {
        _statusId = statusId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Status toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Status) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StatusImpl statusImpl = new StatusImpl();

        statusImpl.setStatusId(getStatusId());
        statusImpl.setName(getName());

        statusImpl.resetOriginalValues();

        return statusImpl;
    }

    @Override
    public int compareTo(Status status) {
        String primaryKey = status.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Status)) {
            return false;
        }

        Status status = (Status) obj;

        String primaryKey = status.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        StatusModelImpl statusModelImpl = this;

        statusModelImpl._originalName = statusModelImpl._name;

        statusModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Status> toCacheModel() {
        StatusCacheModel statusCacheModel = new StatusCacheModel();

        statusCacheModel.statusId = getStatusId();

        String statusId = statusCacheModel.statusId;

        if ((statusId != null) && (statusId.length() == 0)) {
            statusCacheModel.statusId = null;
        }

        statusCacheModel.name = getName();

        String name = statusCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            statusCacheModel.name = null;
        }

        return statusCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{statusId=");
        sb.append(getStatusId());
        sb.append(", name=");
        sb.append(getName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("de.hska.wi.awp.datasource.model.Status");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>statusId</column-name><column-value><![CDATA[");
        sb.append(getStatusId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
