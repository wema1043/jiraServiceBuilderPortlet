package de.hska.wi.awp.datasource.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.hska.wi.awp.datasource.model.Field;
import de.hska.wi.awp.datasource.model.FieldModel;
import de.hska.wi.awp.datasource.model.FieldSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Field service. Represents a row in the &quot;jira_Field&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.hska.wi.awp.datasource.model.FieldModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FieldImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FieldImpl
 * @see de.hska.wi.awp.datasource.model.Field
 * @see de.hska.wi.awp.datasource.model.FieldModel
 * @generated
 */
@JSON(strict = true)
public class FieldModelImpl extends BaseModelImpl<Field> implements FieldModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a field model instance should use the {@link de.hska.wi.awp.datasource.model.Field} interface instead.
     */
    public static final String TABLE_NAME = "jira_Field";
    public static final Object[][] TABLE_COLUMNS = {
            { "fieldId", Types.BIGINT },
            { "createdDate", Types.TIMESTAMP },
            { "resolutionDate", Types.TIMESTAMP },
            { "summary", Types.VARCHAR },
            { "updated", Types.TIMESTAMP },
            { "creatorId", Types.BIGINT },
            { "assigneeId", Types.BIGINT },
            { "statusId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table jira_Field (fieldId LONG not null primary key,createdDate DATE null,resolutionDate DATE null,summary VARCHAR(75) null,updated DATE null,creatorId LONG,assigneeId LONG,statusId LONG)";
    public static final String TABLE_SQL_DROP = "drop table jira_Field";
    public static final String ORDER_BY_JPQL = " ORDER BY field.fieldId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY jira_Field.fieldId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.hska.wi.awp.datasource.model.Field"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.hska.wi.awp.datasource.model.Field"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.hska.wi.awp.datasource.model.Field"));
    private static ClassLoader _classLoader = Field.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Field.class };
    private long _fieldId;
    private Date _createdDate;
    private Date _resolutionDate;
    private String _summary;
    private Date _updated;
    private long _creatorId;
    private long _assigneeId;
    private long _statusId;
    private Field _escapedModel;

    public FieldModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Field toModel(FieldSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Field model = new FieldImpl();

        model.setFieldId(soapModel.getFieldId());
        model.setCreatedDate(soapModel.getCreatedDate());
        model.setResolutionDate(soapModel.getResolutionDate());
        model.setSummary(soapModel.getSummary());
        model.setUpdated(soapModel.getUpdated());
        model.setCreatorId(soapModel.getCreatorId());
        model.setAssigneeId(soapModel.getAssigneeId());
        model.setStatusId(soapModel.getStatusId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Field> toModels(FieldSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Field> models = new ArrayList<Field>(soapModels.length);

        for (FieldSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _fieldId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFieldId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _fieldId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Field.class;
    }

    @Override
    public String getModelClassName() {
        return Field.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("fieldId", getFieldId());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("resolutionDate", getResolutionDate());
        attributes.put("summary", getSummary());
        attributes.put("updated", getUpdated());
        attributes.put("creatorId", getCreatorId());
        attributes.put("assigneeId", getAssigneeId());
        attributes.put("statusId", getStatusId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long fieldId = (Long) attributes.get("fieldId");

        if (fieldId != null) {
            setFieldId(fieldId);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        Date resolutionDate = (Date) attributes.get("resolutionDate");

        if (resolutionDate != null) {
            setResolutionDate(resolutionDate);
        }

        String summary = (String) attributes.get("summary");

        if (summary != null) {
            setSummary(summary);
        }

        Date updated = (Date) attributes.get("updated");

        if (updated != null) {
            setUpdated(updated);
        }

        Long creatorId = (Long) attributes.get("creatorId");

        if (creatorId != null) {
            setCreatorId(creatorId);
        }

        Long assigneeId = (Long) attributes.get("assigneeId");

        if (assigneeId != null) {
            setAssigneeId(assigneeId);
        }

        Long statusId = (Long) attributes.get("statusId");

        if (statusId != null) {
            setStatusId(statusId);
        }
    }

    @JSON
    @Override
    public long getFieldId() {
        return _fieldId;
    }

    @Override
    public void setFieldId(long fieldId) {
        _fieldId = fieldId;
    }

    @JSON
    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _createdDate = createdDate;
    }

    @JSON
    @Override
    public Date getResolutionDate() {
        return _resolutionDate;
    }

    @Override
    public void setResolutionDate(Date resolutionDate) {
        _resolutionDate = resolutionDate;
    }

    @JSON
    @Override
    public String getSummary() {
        if (_summary == null) {
            return StringPool.BLANK;
        } else {
            return _summary;
        }
    }

    @Override
    public void setSummary(String summary) {
        _summary = summary;
    }

    @JSON
    @Override
    public Date getUpdated() {
        return _updated;
    }

    @Override
    public void setUpdated(Date updated) {
        _updated = updated;
    }

    @JSON
    @Override
    public long getCreatorId() {
        return _creatorId;
    }

    @Override
    public void setCreatorId(long creatorId) {
        _creatorId = creatorId;
    }

    @JSON
    @Override
    public long getAssigneeId() {
        return _assigneeId;
    }

    @Override
    public void setAssigneeId(long assigneeId) {
        _assigneeId = assigneeId;
    }

    @JSON
    @Override
    public long getStatusId() {
        return _statusId;
    }

    @Override
    public void setStatusId(long statusId) {
        _statusId = statusId;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Field.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Field toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Field) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FieldImpl fieldImpl = new FieldImpl();

        fieldImpl.setFieldId(getFieldId());
        fieldImpl.setCreatedDate(getCreatedDate());
        fieldImpl.setResolutionDate(getResolutionDate());
        fieldImpl.setSummary(getSummary());
        fieldImpl.setUpdated(getUpdated());
        fieldImpl.setCreatorId(getCreatorId());
        fieldImpl.setAssigneeId(getAssigneeId());
        fieldImpl.setStatusId(getStatusId());

        fieldImpl.resetOriginalValues();

        return fieldImpl;
    }

    @Override
    public int compareTo(Field field) {
        long primaryKey = field.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Field)) {
            return false;
        }

        Field field = (Field) obj;

        long primaryKey = field.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Field> toCacheModel() {
        FieldCacheModel fieldCacheModel = new FieldCacheModel();

        fieldCacheModel.fieldId = getFieldId();

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            fieldCacheModel.createdDate = createdDate.getTime();
        } else {
            fieldCacheModel.createdDate = Long.MIN_VALUE;
        }

        Date resolutionDate = getResolutionDate();

        if (resolutionDate != null) {
            fieldCacheModel.resolutionDate = resolutionDate.getTime();
        } else {
            fieldCacheModel.resolutionDate = Long.MIN_VALUE;
        }

        fieldCacheModel.summary = getSummary();

        String summary = fieldCacheModel.summary;

        if ((summary != null) && (summary.length() == 0)) {
            fieldCacheModel.summary = null;
        }

        Date updated = getUpdated();

        if (updated != null) {
            fieldCacheModel.updated = updated.getTime();
        } else {
            fieldCacheModel.updated = Long.MIN_VALUE;
        }

        fieldCacheModel.creatorId = getCreatorId();

        fieldCacheModel.assigneeId = getAssigneeId();

        fieldCacheModel.statusId = getStatusId();

        return fieldCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{fieldId=");
        sb.append(getFieldId());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", resolutionDate=");
        sb.append(getResolutionDate());
        sb.append(", summary=");
        sb.append(getSummary());
        sb.append(", updated=");
        sb.append(getUpdated());
        sb.append(", creatorId=");
        sb.append(getCreatorId());
        sb.append(", assigneeId=");
        sb.append(getAssigneeId());
        sb.append(", statusId=");
        sb.append(getStatusId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("de.hska.wi.awp.datasource.model.Field");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>fieldId</column-name><column-value><![CDATA[");
        sb.append(getFieldId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>resolutionDate</column-name><column-value><![CDATA[");
        sb.append(getResolutionDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>summary</column-name><column-value><![CDATA[");
        sb.append(getSummary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updated</column-name><column-value><![CDATA[");
        sb.append(getUpdated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creatorId</column-name><column-value><![CDATA[");
        sb.append(getCreatorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>assigneeId</column-name><column-value><![CDATA[");
        sb.append(getAssigneeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusId</column-name><column-value><![CDATA[");
        sb.append(getStatusId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
