package de.hska.wi.awp.datasource.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import de.hska.wi.awp.datasource.model.Status;
import de.hska.wi.awp.datasource.service.StatusLocalService;
import de.hska.wi.awp.datasource.service.persistence.FieldPersistence;
import de.hska.wi.awp.datasource.service.persistence.IssuePersistence;
import de.hska.wi.awp.datasource.service.persistence.JiraUserPersistence;
import de.hska.wi.awp.datasource.service.persistence.StatusPersistence;
import de.hska.wi.awp.datasource.service.persistence.StudentPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the status local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link de.hska.wi.awp.datasource.service.impl.StatusLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see de.hska.wi.awp.datasource.service.impl.StatusLocalServiceImpl
 * @see de.hska.wi.awp.datasource.service.StatusLocalServiceUtil
 * @generated
 */
public abstract class StatusLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements StatusLocalService, IdentifiableBean {
    @BeanReference(type = de.hska.wi.awp.datasource.service.FieldLocalService.class)
    protected de.hska.wi.awp.datasource.service.FieldLocalService fieldLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.FieldService.class)
    protected de.hska.wi.awp.datasource.service.FieldService fieldService;
    @BeanReference(type = FieldPersistence.class)
    protected FieldPersistence fieldPersistence;
    @BeanReference(type = de.hska.wi.awp.datasource.service.IssueLocalService.class)
    protected de.hska.wi.awp.datasource.service.IssueLocalService issueLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.IssueService.class)
    protected de.hska.wi.awp.datasource.service.IssueService issueService;
    @BeanReference(type = IssuePersistence.class)
    protected IssuePersistence issuePersistence;
    @BeanReference(type = de.hska.wi.awp.datasource.service.JiraUserLocalService.class)
    protected de.hska.wi.awp.datasource.service.JiraUserLocalService jiraUserLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.JiraUserService.class)
    protected de.hska.wi.awp.datasource.service.JiraUserService jiraUserService;
    @BeanReference(type = JiraUserPersistence.class)
    protected JiraUserPersistence jiraUserPersistence;
    @BeanReference(type = de.hska.wi.awp.datasource.service.StatusLocalService.class)
    protected de.hska.wi.awp.datasource.service.StatusLocalService statusLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.StatusService.class)
    protected de.hska.wi.awp.datasource.service.StatusService statusService;
    @BeanReference(type = StatusPersistence.class)
    protected StatusPersistence statusPersistence;
    @BeanReference(type = de.hska.wi.awp.datasource.service.StudentLocalService.class)
    protected de.hska.wi.awp.datasource.service.StudentLocalService studentLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.StudentService.class)
    protected de.hska.wi.awp.datasource.service.StudentService studentService;
    @BeanReference(type = StudentPersistence.class)
    protected StudentPersistence studentPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private StatusLocalServiceClpInvoker _clpInvoker = new StatusLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link de.hska.wi.awp.datasource.service.StatusLocalServiceUtil} to access the status local service.
     */

    /**
     * Adds the status to the database. Also notifies the appropriate model listeners.
     *
     * @param status the status
     * @return the status that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Status addStatus(Status status) throws SystemException {
        status.setNew(true);

        return statusPersistence.update(status);
    }

    /**
     * Creates a new status with the primary key. Does not add the status to the database.
     *
     * @param statusId the primary key for the new status
     * @return the new status
     */
    @Override
    public Status createStatus(long statusId) {
        return statusPersistence.create(statusId);
    }

    /**
     * Deletes the status with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param statusId the primary key of the status
     * @return the status that was removed
     * @throws PortalException if a status with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Status deleteStatus(long statusId)
        throws PortalException, SystemException {
        return statusPersistence.remove(statusId);
    }

    /**
     * Deletes the status from the database. Also notifies the appropriate model listeners.
     *
     * @param status the status
     * @return the status that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Status deleteStatus(Status status) throws SystemException {
        return statusPersistence.remove(status);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Status.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return statusPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.hska.wi.awp.datasource.model.impl.StatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return statusPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.hska.wi.awp.datasource.model.impl.StatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return statusPersistence.findWithDynamicQuery(dynamicQuery, start, end,
            orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return statusPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return statusPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Status fetchStatus(long statusId) throws SystemException {
        return statusPersistence.fetchByPrimaryKey(statusId);
    }

    /**
     * Returns the status with the primary key.
     *
     * @param statusId the primary key of the status
     * @return the status
     * @throws PortalException if a status with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Status getStatus(long statusId)
        throws PortalException, SystemException {
        return statusPersistence.findByPrimaryKey(statusId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return statusPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the statuses.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.hska.wi.awp.datasource.model.impl.StatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of statuses
     * @param end the upper bound of the range of statuses (not inclusive)
     * @return the range of statuses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Status> getStatuses(int start, int end)
        throws SystemException {
        return statusPersistence.findAll(start, end);
    }

    /**
     * Returns the number of statuses.
     *
     * @return the number of statuses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getStatusesCount() throws SystemException {
        return statusPersistence.countAll();
    }

    /**
     * Updates the status in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param status the status
     * @return the status that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Status updateStatus(Status status) throws SystemException {
        return statusPersistence.update(status);
    }

    /**
     * Returns the field local service.
     *
     * @return the field local service
     */
    public de.hska.wi.awp.datasource.service.FieldLocalService getFieldLocalService() {
        return fieldLocalService;
    }

    /**
     * Sets the field local service.
     *
     * @param fieldLocalService the field local service
     */
    public void setFieldLocalService(
        de.hska.wi.awp.datasource.service.FieldLocalService fieldLocalService) {
        this.fieldLocalService = fieldLocalService;
    }

    /**
     * Returns the field remote service.
     *
     * @return the field remote service
     */
    public de.hska.wi.awp.datasource.service.FieldService getFieldService() {
        return fieldService;
    }

    /**
     * Sets the field remote service.
     *
     * @param fieldService the field remote service
     */
    public void setFieldService(
        de.hska.wi.awp.datasource.service.FieldService fieldService) {
        this.fieldService = fieldService;
    }

    /**
     * Returns the field persistence.
     *
     * @return the field persistence
     */
    public FieldPersistence getFieldPersistence() {
        return fieldPersistence;
    }

    /**
     * Sets the field persistence.
     *
     * @param fieldPersistence the field persistence
     */
    public void setFieldPersistence(FieldPersistence fieldPersistence) {
        this.fieldPersistence = fieldPersistence;
    }

    /**
     * Returns the issue local service.
     *
     * @return the issue local service
     */
    public de.hska.wi.awp.datasource.service.IssueLocalService getIssueLocalService() {
        return issueLocalService;
    }

    /**
     * Sets the issue local service.
     *
     * @param issueLocalService the issue local service
     */
    public void setIssueLocalService(
        de.hska.wi.awp.datasource.service.IssueLocalService issueLocalService) {
        this.issueLocalService = issueLocalService;
    }

    /**
     * Returns the issue remote service.
     *
     * @return the issue remote service
     */
    public de.hska.wi.awp.datasource.service.IssueService getIssueService() {
        return issueService;
    }

    /**
     * Sets the issue remote service.
     *
     * @param issueService the issue remote service
     */
    public void setIssueService(
        de.hska.wi.awp.datasource.service.IssueService issueService) {
        this.issueService = issueService;
    }

    /**
     * Returns the issue persistence.
     *
     * @return the issue persistence
     */
    public IssuePersistence getIssuePersistence() {
        return issuePersistence;
    }

    /**
     * Sets the issue persistence.
     *
     * @param issuePersistence the issue persistence
     */
    public void setIssuePersistence(IssuePersistence issuePersistence) {
        this.issuePersistence = issuePersistence;
    }

    /**
     * Returns the jira user local service.
     *
     * @return the jira user local service
     */
    public de.hska.wi.awp.datasource.service.JiraUserLocalService getJiraUserLocalService() {
        return jiraUserLocalService;
    }

    /**
     * Sets the jira user local service.
     *
     * @param jiraUserLocalService the jira user local service
     */
    public void setJiraUserLocalService(
        de.hska.wi.awp.datasource.service.JiraUserLocalService jiraUserLocalService) {
        this.jiraUserLocalService = jiraUserLocalService;
    }

    /**
     * Returns the jira user remote service.
     *
     * @return the jira user remote service
     */
    public de.hska.wi.awp.datasource.service.JiraUserService getJiraUserService() {
        return jiraUserService;
    }

    /**
     * Sets the jira user remote service.
     *
     * @param jiraUserService the jira user remote service
     */
    public void setJiraUserService(
        de.hska.wi.awp.datasource.service.JiraUserService jiraUserService) {
        this.jiraUserService = jiraUserService;
    }

    /**
     * Returns the jira user persistence.
     *
     * @return the jira user persistence
     */
    public JiraUserPersistence getJiraUserPersistence() {
        return jiraUserPersistence;
    }

    /**
     * Sets the jira user persistence.
     *
     * @param jiraUserPersistence the jira user persistence
     */
    public void setJiraUserPersistence(JiraUserPersistence jiraUserPersistence) {
        this.jiraUserPersistence = jiraUserPersistence;
    }

    /**
     * Returns the status local service.
     *
     * @return the status local service
     */
    public de.hska.wi.awp.datasource.service.StatusLocalService getStatusLocalService() {
        return statusLocalService;
    }

    /**
     * Sets the status local service.
     *
     * @param statusLocalService the status local service
     */
    public void setStatusLocalService(
        de.hska.wi.awp.datasource.service.StatusLocalService statusLocalService) {
        this.statusLocalService = statusLocalService;
    }

    /**
     * Returns the status remote service.
     *
     * @return the status remote service
     */
    public de.hska.wi.awp.datasource.service.StatusService getStatusService() {
        return statusService;
    }

    /**
     * Sets the status remote service.
     *
     * @param statusService the status remote service
     */
    public void setStatusService(
        de.hska.wi.awp.datasource.service.StatusService statusService) {
        this.statusService = statusService;
    }

    /**
     * Returns the status persistence.
     *
     * @return the status persistence
     */
    public StatusPersistence getStatusPersistence() {
        return statusPersistence;
    }

    /**
     * Sets the status persistence.
     *
     * @param statusPersistence the status persistence
     */
    public void setStatusPersistence(StatusPersistence statusPersistence) {
        this.statusPersistence = statusPersistence;
    }

    /**
     * Returns the student local service.
     *
     * @return the student local service
     */
    public de.hska.wi.awp.datasource.service.StudentLocalService getStudentLocalService() {
        return studentLocalService;
    }

    /**
     * Sets the student local service.
     *
     * @param studentLocalService the student local service
     */
    public void setStudentLocalService(
        de.hska.wi.awp.datasource.service.StudentLocalService studentLocalService) {
        this.studentLocalService = studentLocalService;
    }

    /**
     * Returns the student remote service.
     *
     * @return the student remote service
     */
    public de.hska.wi.awp.datasource.service.StudentService getStudentService() {
        return studentService;
    }

    /**
     * Sets the student remote service.
     *
     * @param studentService the student remote service
     */
    public void setStudentService(
        de.hska.wi.awp.datasource.service.StudentService studentService) {
        this.studentService = studentService;
    }

    /**
     * Returns the student persistence.
     *
     * @return the student persistence
     */
    public StudentPersistence getStudentPersistence() {
        return studentPersistence;
    }

    /**
     * Sets the student persistence.
     *
     * @param studentPersistence the student persistence
     */
    public void setStudentPersistence(StudentPersistence studentPersistence) {
        this.studentPersistence = studentPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("de.hska.wi.awp.datasource.model.Status",
            statusLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "de.hska.wi.awp.datasource.model.Status");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Status.class;
    }

    protected String getModelClassName() {
        return Status.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = statusPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
