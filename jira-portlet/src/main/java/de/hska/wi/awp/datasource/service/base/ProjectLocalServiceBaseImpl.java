package de.hska.wi.awp.datasource.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import de.hska.wi.awp.datasource.model.Project;
import de.hska.wi.awp.datasource.service.ProjectLocalService;
import de.hska.wi.awp.datasource.service.persistence.FieldPersistence;
import de.hska.wi.awp.datasource.service.persistence.IssuePersistence;
import de.hska.wi.awp.datasource.service.persistence.IssuePriorityPersistence;
import de.hska.wi.awp.datasource.service.persistence.IssueTypePersistence;
import de.hska.wi.awp.datasource.service.persistence.JiraUserPersistence;
import de.hska.wi.awp.datasource.service.persistence.ProjectPersistence;
import de.hska.wi.awp.datasource.service.persistence.StatusPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the project local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link de.hska.wi.awp.datasource.service.impl.ProjectLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see de.hska.wi.awp.datasource.service.impl.ProjectLocalServiceImpl
 * @see de.hska.wi.awp.datasource.service.ProjectLocalServiceUtil
 * @generated
 */
public abstract class ProjectLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements ProjectLocalService, IdentifiableBean {
    @BeanReference(type = de.hska.wi.awp.datasource.service.FieldLocalService.class)
    protected de.hska.wi.awp.datasource.service.FieldLocalService fieldLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.FieldService.class)
    protected de.hska.wi.awp.datasource.service.FieldService fieldService;
    @BeanReference(type = FieldPersistence.class)
    protected FieldPersistence fieldPersistence;
    @BeanReference(type = de.hska.wi.awp.datasource.service.IssueLocalService.class)
    protected de.hska.wi.awp.datasource.service.IssueLocalService issueLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.IssueService.class)
    protected de.hska.wi.awp.datasource.service.IssueService issueService;
    @BeanReference(type = IssuePersistence.class)
    protected IssuePersistence issuePersistence;
    @BeanReference(type = de.hska.wi.awp.datasource.service.IssuePriorityLocalService.class)
    protected de.hska.wi.awp.datasource.service.IssuePriorityLocalService issuePriorityLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.IssuePriorityService.class)
    protected de.hska.wi.awp.datasource.service.IssuePriorityService issuePriorityService;
    @BeanReference(type = IssuePriorityPersistence.class)
    protected IssuePriorityPersistence issuePriorityPersistence;
    @BeanReference(type = de.hska.wi.awp.datasource.service.IssueTypeLocalService.class)
    protected de.hska.wi.awp.datasource.service.IssueTypeLocalService issueTypeLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.IssueTypeService.class)
    protected de.hska.wi.awp.datasource.service.IssueTypeService issueTypeService;
    @BeanReference(type = IssueTypePersistence.class)
    protected IssueTypePersistence issueTypePersistence;
    @BeanReference(type = de.hska.wi.awp.datasource.service.JiraUserLocalService.class)
    protected de.hska.wi.awp.datasource.service.JiraUserLocalService jiraUserLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.JiraUserService.class)
    protected de.hska.wi.awp.datasource.service.JiraUserService jiraUserService;
    @BeanReference(type = JiraUserPersistence.class)
    protected JiraUserPersistence jiraUserPersistence;
    @BeanReference(type = de.hska.wi.awp.datasource.service.ProjectLocalService.class)
    protected de.hska.wi.awp.datasource.service.ProjectLocalService projectLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.ProjectService.class)
    protected de.hska.wi.awp.datasource.service.ProjectService projectService;
    @BeanReference(type = ProjectPersistence.class)
    protected ProjectPersistence projectPersistence;
    @BeanReference(type = de.hska.wi.awp.datasource.service.StatusLocalService.class)
    protected de.hska.wi.awp.datasource.service.StatusLocalService statusLocalService;
    @BeanReference(type = de.hska.wi.awp.datasource.service.StatusService.class)
    protected de.hska.wi.awp.datasource.service.StatusService statusService;
    @BeanReference(type = StatusPersistence.class)
    protected StatusPersistence statusPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private ProjectLocalServiceClpInvoker _clpInvoker = new ProjectLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link de.hska.wi.awp.datasource.service.ProjectLocalServiceUtil} to access the project local service.
     */

    /**
     * Adds the project to the database. Also notifies the appropriate model listeners.
     *
     * @param project the project
     * @return the project that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Project addProject(Project project) throws SystemException {
        project.setNew(true);

        return projectPersistence.update(project);
    }

    /**
     * Creates a new project with the primary key. Does not add the project to the database.
     *
     * @param projectId the primary key for the new project
     * @return the new project
     */
    @Override
    public Project createProject(String projectId) {
        return projectPersistence.create(projectId);
    }

    /**
     * Deletes the project with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param projectId the primary key of the project
     * @return the project that was removed
     * @throws PortalException if a project with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Project deleteProject(String projectId)
        throws PortalException, SystemException {
        return projectPersistence.remove(projectId);
    }

    /**
     * Deletes the project from the database. Also notifies the appropriate model listeners.
     *
     * @param project the project
     * @return the project that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Project deleteProject(Project project) throws SystemException {
        return projectPersistence.remove(project);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Project.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return projectPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.hska.wi.awp.datasource.model.impl.ProjectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return projectPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.hska.wi.awp.datasource.model.impl.ProjectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return projectPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return projectPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return projectPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Project fetchProject(String projectId) throws SystemException {
        return projectPersistence.fetchByPrimaryKey(projectId);
    }

    /**
     * Returns the project with the primary key.
     *
     * @param projectId the primary key of the project
     * @return the project
     * @throws PortalException if a project with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Project getProject(String projectId)
        throws PortalException, SystemException {
        return projectPersistence.findByPrimaryKey(projectId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return projectPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the projects.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.hska.wi.awp.datasource.model.impl.ProjectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of projects
     * @param end the upper bound of the range of projects (not inclusive)
     * @return the range of projects
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Project> getProjects(int start, int end)
        throws SystemException {
        return projectPersistence.findAll(start, end);
    }

    /**
     * Returns the number of projects.
     *
     * @return the number of projects
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getProjectsCount() throws SystemException {
        return projectPersistence.countAll();
    }

    /**
     * Updates the project in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param project the project
     * @return the project that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Project updateProject(Project project) throws SystemException {
        return projectPersistence.update(project);
    }

    /**
     * Returns the field local service.
     *
     * @return the field local service
     */
    public de.hska.wi.awp.datasource.service.FieldLocalService getFieldLocalService() {
        return fieldLocalService;
    }

    /**
     * Sets the field local service.
     *
     * @param fieldLocalService the field local service
     */
    public void setFieldLocalService(
        de.hska.wi.awp.datasource.service.FieldLocalService fieldLocalService) {
        this.fieldLocalService = fieldLocalService;
    }

    /**
     * Returns the field remote service.
     *
     * @return the field remote service
     */
    public de.hska.wi.awp.datasource.service.FieldService getFieldService() {
        return fieldService;
    }

    /**
     * Sets the field remote service.
     *
     * @param fieldService the field remote service
     */
    public void setFieldService(
        de.hska.wi.awp.datasource.service.FieldService fieldService) {
        this.fieldService = fieldService;
    }

    /**
     * Returns the field persistence.
     *
     * @return the field persistence
     */
    public FieldPersistence getFieldPersistence() {
        return fieldPersistence;
    }

    /**
     * Sets the field persistence.
     *
     * @param fieldPersistence the field persistence
     */
    public void setFieldPersistence(FieldPersistence fieldPersistence) {
        this.fieldPersistence = fieldPersistence;
    }

    /**
     * Returns the issue local service.
     *
     * @return the issue local service
     */
    public de.hska.wi.awp.datasource.service.IssueLocalService getIssueLocalService() {
        return issueLocalService;
    }

    /**
     * Sets the issue local service.
     *
     * @param issueLocalService the issue local service
     */
    public void setIssueLocalService(
        de.hska.wi.awp.datasource.service.IssueLocalService issueLocalService) {
        this.issueLocalService = issueLocalService;
    }

    /**
     * Returns the issue remote service.
     *
     * @return the issue remote service
     */
    public de.hska.wi.awp.datasource.service.IssueService getIssueService() {
        return issueService;
    }

    /**
     * Sets the issue remote service.
     *
     * @param issueService the issue remote service
     */
    public void setIssueService(
        de.hska.wi.awp.datasource.service.IssueService issueService) {
        this.issueService = issueService;
    }

    /**
     * Returns the issue persistence.
     *
     * @return the issue persistence
     */
    public IssuePersistence getIssuePersistence() {
        return issuePersistence;
    }

    /**
     * Sets the issue persistence.
     *
     * @param issuePersistence the issue persistence
     */
    public void setIssuePersistence(IssuePersistence issuePersistence) {
        this.issuePersistence = issuePersistence;
    }

    /**
     * Returns the issue priority local service.
     *
     * @return the issue priority local service
     */
    public de.hska.wi.awp.datasource.service.IssuePriorityLocalService getIssuePriorityLocalService() {
        return issuePriorityLocalService;
    }

    /**
     * Sets the issue priority local service.
     *
     * @param issuePriorityLocalService the issue priority local service
     */
    public void setIssuePriorityLocalService(
        de.hska.wi.awp.datasource.service.IssuePriorityLocalService issuePriorityLocalService) {
        this.issuePriorityLocalService = issuePriorityLocalService;
    }

    /**
     * Returns the issue priority remote service.
     *
     * @return the issue priority remote service
     */
    public de.hska.wi.awp.datasource.service.IssuePriorityService getIssuePriorityService() {
        return issuePriorityService;
    }

    /**
     * Sets the issue priority remote service.
     *
     * @param issuePriorityService the issue priority remote service
     */
    public void setIssuePriorityService(
        de.hska.wi.awp.datasource.service.IssuePriorityService issuePriorityService) {
        this.issuePriorityService = issuePriorityService;
    }

    /**
     * Returns the issue priority persistence.
     *
     * @return the issue priority persistence
     */
    public IssuePriorityPersistence getIssuePriorityPersistence() {
        return issuePriorityPersistence;
    }

    /**
     * Sets the issue priority persistence.
     *
     * @param issuePriorityPersistence the issue priority persistence
     */
    public void setIssuePriorityPersistence(
        IssuePriorityPersistence issuePriorityPersistence) {
        this.issuePriorityPersistence = issuePriorityPersistence;
    }

    /**
     * Returns the issue type local service.
     *
     * @return the issue type local service
     */
    public de.hska.wi.awp.datasource.service.IssueTypeLocalService getIssueTypeLocalService() {
        return issueTypeLocalService;
    }

    /**
     * Sets the issue type local service.
     *
     * @param issueTypeLocalService the issue type local service
     */
    public void setIssueTypeLocalService(
        de.hska.wi.awp.datasource.service.IssueTypeLocalService issueTypeLocalService) {
        this.issueTypeLocalService = issueTypeLocalService;
    }

    /**
     * Returns the issue type remote service.
     *
     * @return the issue type remote service
     */
    public de.hska.wi.awp.datasource.service.IssueTypeService getIssueTypeService() {
        return issueTypeService;
    }

    /**
     * Sets the issue type remote service.
     *
     * @param issueTypeService the issue type remote service
     */
    public void setIssueTypeService(
        de.hska.wi.awp.datasource.service.IssueTypeService issueTypeService) {
        this.issueTypeService = issueTypeService;
    }

    /**
     * Returns the issue type persistence.
     *
     * @return the issue type persistence
     */
    public IssueTypePersistence getIssueTypePersistence() {
        return issueTypePersistence;
    }

    /**
     * Sets the issue type persistence.
     *
     * @param issueTypePersistence the issue type persistence
     */
    public void setIssueTypePersistence(
        IssueTypePersistence issueTypePersistence) {
        this.issueTypePersistence = issueTypePersistence;
    }

    /**
     * Returns the jira user local service.
     *
     * @return the jira user local service
     */
    public de.hska.wi.awp.datasource.service.JiraUserLocalService getJiraUserLocalService() {
        return jiraUserLocalService;
    }

    /**
     * Sets the jira user local service.
     *
     * @param jiraUserLocalService the jira user local service
     */
    public void setJiraUserLocalService(
        de.hska.wi.awp.datasource.service.JiraUserLocalService jiraUserLocalService) {
        this.jiraUserLocalService = jiraUserLocalService;
    }

    /**
     * Returns the jira user remote service.
     *
     * @return the jira user remote service
     */
    public de.hska.wi.awp.datasource.service.JiraUserService getJiraUserService() {
        return jiraUserService;
    }

    /**
     * Sets the jira user remote service.
     *
     * @param jiraUserService the jira user remote service
     */
    public void setJiraUserService(
        de.hska.wi.awp.datasource.service.JiraUserService jiraUserService) {
        this.jiraUserService = jiraUserService;
    }

    /**
     * Returns the jira user persistence.
     *
     * @return the jira user persistence
     */
    public JiraUserPersistence getJiraUserPersistence() {
        return jiraUserPersistence;
    }

    /**
     * Sets the jira user persistence.
     *
     * @param jiraUserPersistence the jira user persistence
     */
    public void setJiraUserPersistence(JiraUserPersistence jiraUserPersistence) {
        this.jiraUserPersistence = jiraUserPersistence;
    }

    /**
     * Returns the project local service.
     *
     * @return the project local service
     */
    public de.hska.wi.awp.datasource.service.ProjectLocalService getProjectLocalService() {
        return projectLocalService;
    }

    /**
     * Sets the project local service.
     *
     * @param projectLocalService the project local service
     */
    public void setProjectLocalService(
        de.hska.wi.awp.datasource.service.ProjectLocalService projectLocalService) {
        this.projectLocalService = projectLocalService;
    }

    /**
     * Returns the project remote service.
     *
     * @return the project remote service
     */
    public de.hska.wi.awp.datasource.service.ProjectService getProjectService() {
        return projectService;
    }

    /**
     * Sets the project remote service.
     *
     * @param projectService the project remote service
     */
    public void setProjectService(
        de.hska.wi.awp.datasource.service.ProjectService projectService) {
        this.projectService = projectService;
    }

    /**
     * Returns the project persistence.
     *
     * @return the project persistence
     */
    public ProjectPersistence getProjectPersistence() {
        return projectPersistence;
    }

    /**
     * Sets the project persistence.
     *
     * @param projectPersistence the project persistence
     */
    public void setProjectPersistence(ProjectPersistence projectPersistence) {
        this.projectPersistence = projectPersistence;
    }

    /**
     * Returns the status local service.
     *
     * @return the status local service
     */
    public de.hska.wi.awp.datasource.service.StatusLocalService getStatusLocalService() {
        return statusLocalService;
    }

    /**
     * Sets the status local service.
     *
     * @param statusLocalService the status local service
     */
    public void setStatusLocalService(
        de.hska.wi.awp.datasource.service.StatusLocalService statusLocalService) {
        this.statusLocalService = statusLocalService;
    }

    /**
     * Returns the status remote service.
     *
     * @return the status remote service
     */
    public de.hska.wi.awp.datasource.service.StatusService getStatusService() {
        return statusService;
    }

    /**
     * Sets the status remote service.
     *
     * @param statusService the status remote service
     */
    public void setStatusService(
        de.hska.wi.awp.datasource.service.StatusService statusService) {
        this.statusService = statusService;
    }

    /**
     * Returns the status persistence.
     *
     * @return the status persistence
     */
    public StatusPersistence getStatusPersistence() {
        return statusPersistence;
    }

    /**
     * Sets the status persistence.
     *
     * @param statusPersistence the status persistence
     */
    public void setStatusPersistence(StatusPersistence statusPersistence) {
        this.statusPersistence = statusPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("de.hska.wi.awp.datasource.model.Project",
            projectLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "de.hska.wi.awp.datasource.model.Project");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Project.class;
    }

    protected String getModelClassName() {
        return Project.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = projectPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
