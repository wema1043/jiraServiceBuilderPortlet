package de.hska.wi.awp.datasource.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import de.hska.wi.awp.datasource.model.Issue;
import de.hska.wi.awp.datasource.model.IssueModel;
import de.hska.wi.awp.datasource.model.IssueSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Issue service. Represents a row in the &quot;jira_Issue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.hska.wi.awp.datasource.model.IssueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IssueImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see IssueImpl
 * @see de.hska.wi.awp.datasource.model.Issue
 * @see de.hska.wi.awp.datasource.model.IssueModel
 * @generated
 */
@JSON(strict = true)
public class IssueModelImpl extends BaseModelImpl<Issue> implements IssueModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a issue model instance should use the {@link de.hska.wi.awp.datasource.model.Issue} interface instead.
     */
    public static final String TABLE_NAME = "jira_Issue";
    public static final Object[][] TABLE_COLUMNS = {
            { "issueId", Types.VARCHAR },
            { "key_", Types.VARCHAR },
            { "self", Types.VARCHAR },
            { "fieldId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table jira_Issue (issueId VARCHAR(75) not null primary key,key_ VARCHAR(75) null,self VARCHAR(75) null,fieldId LONG)";
    public static final String TABLE_SQL_DROP = "drop table jira_Issue";
    public static final String ORDER_BY_JPQL = " ORDER BY issue.issueId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY jira_Issue.issueId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.hska.wi.awp.datasource.model.Issue"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.hska.wi.awp.datasource.model.Issue"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.hska.wi.awp.datasource.model.Issue"),
            true);
    public static long ISSUEID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.hska.wi.awp.datasource.model.Issue"));
    private static ClassLoader _classLoader = Issue.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Issue.class };
    private String _issueId;
    private String _originalIssueId;
    private String _key;
    private String _self;
    private long _fieldId;
    private long _columnBitmask;
    private Issue _escapedModel;

    public IssueModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Issue toModel(IssueSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Issue model = new IssueImpl();

        model.setIssueId(soapModel.getIssueId());
        model.setKey(soapModel.getKey());
        model.setSelf(soapModel.getSelf());
        model.setFieldId(soapModel.getFieldId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Issue> toModels(IssueSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Issue> models = new ArrayList<Issue>(soapModels.length);

        for (IssueSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _issueId;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setIssueId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _issueId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return Issue.class;
    }

    @Override
    public String getModelClassName() {
        return Issue.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("issueId", getIssueId());
        attributes.put("key", getKey());
        attributes.put("self", getSelf());
        attributes.put("fieldId", getFieldId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String issueId = (String) attributes.get("issueId");

        if (issueId != null) {
            setIssueId(issueId);
        }

        String key = (String) attributes.get("key");

        if (key != null) {
            setKey(key);
        }

        String self = (String) attributes.get("self");

        if (self != null) {
            setSelf(self);
        }

        Long fieldId = (Long) attributes.get("fieldId");

        if (fieldId != null) {
            setFieldId(fieldId);
        }
    }

    @JSON
    @Override
    public String getIssueId() {
        if (_issueId == null) {
            return StringPool.BLANK;
        } else {
            return _issueId;
        }
    }

    @Override
    public void setIssueId(String issueId) {
        _columnBitmask |= ISSUEID_COLUMN_BITMASK;

        if (_originalIssueId == null) {
            _originalIssueId = _issueId;
        }

        _issueId = issueId;
    }

    public String getOriginalIssueId() {
        return GetterUtil.getString(_originalIssueId);
    }

    @JSON
    @Override
    public String getKey() {
        if (_key == null) {
            return StringPool.BLANK;
        } else {
            return _key;
        }
    }

    @Override
    public void setKey(String key) {
        _key = key;
    }

    @JSON
    @Override
    public String getSelf() {
        if (_self == null) {
            return StringPool.BLANK;
        } else {
            return _self;
        }
    }

    @Override
    public void setSelf(String self) {
        _self = self;
    }

    @JSON
    @Override
    public long getFieldId() {
        return _fieldId;
    }

    @Override
    public void setFieldId(long fieldId) {
        _fieldId = fieldId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Issue toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Issue) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IssueImpl issueImpl = new IssueImpl();

        issueImpl.setIssueId(getIssueId());
        issueImpl.setKey(getKey());
        issueImpl.setSelf(getSelf());
        issueImpl.setFieldId(getFieldId());

        issueImpl.resetOriginalValues();

        return issueImpl;
    }

    @Override
    public int compareTo(Issue issue) {
        String primaryKey = issue.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Issue)) {
            return false;
        }

        Issue issue = (Issue) obj;

        String primaryKey = issue.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        IssueModelImpl issueModelImpl = this;

        issueModelImpl._originalIssueId = issueModelImpl._issueId;

        issueModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Issue> toCacheModel() {
        IssueCacheModel issueCacheModel = new IssueCacheModel();

        issueCacheModel.issueId = getIssueId();

        String issueId = issueCacheModel.issueId;

        if ((issueId != null) && (issueId.length() == 0)) {
            issueCacheModel.issueId = null;
        }

        issueCacheModel.key = getKey();

        String key = issueCacheModel.key;

        if ((key != null) && (key.length() == 0)) {
            issueCacheModel.key = null;
        }

        issueCacheModel.self = getSelf();

        String self = issueCacheModel.self;

        if ((self != null) && (self.length() == 0)) {
            issueCacheModel.self = null;
        }

        issueCacheModel.fieldId = getFieldId();

        return issueCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{issueId=");
        sb.append(getIssueId());
        sb.append(", key=");
        sb.append(getKey());
        sb.append(", self=");
        sb.append(getSelf());
        sb.append(", fieldId=");
        sb.append(getFieldId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("de.hska.wi.awp.datasource.model.Issue");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>issueId</column-name><column-value><![CDATA[");
        sb.append(getIssueId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>key</column-name><column-value><![CDATA[");
        sb.append(getKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>self</column-name><column-value><![CDATA[");
        sb.append(getSelf());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fieldId</column-name><column-value><![CDATA[");
        sb.append(getFieldId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
